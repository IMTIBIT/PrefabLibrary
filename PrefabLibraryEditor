using UnityEditor;
using UnityEngine;
using System.Collections.Generic;

public class PrefabLibraryEditor : EditorWindow
{
    private PrefabLibrary prefabLibrary;
    private Vector2 scrollPosition;
    private List<List<bool>> prefabSelectionStates = new List<List<bool>>();
    private string searchQuery = "";

    [MenuItem("Window/Prefab Library")]
    public static void ShowWindow()
    {
        GetWindow<PrefabLibraryEditor>("Prefab Library");
    }

    private void OnGUI()
    {
        EditorGUILayout.BeginHorizontal();
        EditorGUILayout.LabelField("Prefab Library", EditorStyles.boldLabel);
        prefabLibrary = (PrefabLibrary)EditorGUILayout.ObjectField(prefabLibrary, typeof(PrefabLibrary), false);

        if (prefabLibrary != null && prefabSelectionStates.Count == 0)
        {
            for (int i = 0; i < prefabLibrary.prefabCategories.Count; i++)
            {
                prefabSelectionStates.Add(new List<bool>(new bool[prefabLibrary.prefabCategories[i].prefabs.Count]));
            }
        }

        EditorGUILayout.EndHorizontal();

        if (prefabLibrary == null)
        {
            EditorGUILayout.HelpBox("Please assign a Prefab Library asset.", MessageType.Warning);
            return;
        }

        scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

        // Filtering and Searching
        EditorGUILayout.BeginHorizontal();
        EditorGUILayout.LabelField("Search", GUILayout.Width(50));
        searchQuery = EditorGUILayout.TextField(searchQuery);
        EditorGUILayout.EndHorizontal();

        EditorGUILayout.Space();

        // Display prefabs
        for (int i = 0; i < prefabLibrary.prefabCategories.Count; i++)
        {
            EditorGUILayout.BeginHorizontal();
            prefabLibrary.prefabCategories[i].categoryName = EditorGUILayout.TextField(prefabLibrary.prefabCategories[i].categoryName);

            // Category context menu
            if (Event.current.type == EventType.ContextClick && GUILayoutUtility.GetLastRect().Contains(Event.current.mousePosition))
            {
                Event.current.Use();
                GenericMenu categoryMenu = new GenericMenu();
                categoryMenu.AddItem(new GUIContent("Add Category"), false, AddCategory);
                categoryMenu.AddItem(new GUIContent("Remove Category"), false, () => RemoveCategory(i));
                categoryMenu.ShowAsContext();
            }

            EditorGUILayout.EndHorizontal();

            for (int j = 0; j < prefabLibrary.prefabCategories[i].prefabs.Count; j++)
            {
                if (prefabLibrary.prefabCategories[i].prefabs[j].name.ToLower().Contains(searchQuery.ToLower()) ||
                    prefabLibrary.prefabCategories[i].categoryName.ToLower().Contains(searchQuery.ToLower()) ||
                    prefabLibrary.prefabCategories[i].prefabs[j].tag.ToLower().Contains(searchQuery.ToLower()))
                {
                    EditorGUILayout.BeginHorizontal();
                    prefabSelectionStates[i][j] = EditorGUILayout.Toggle(prefabSelectionStates[i][j], GUILayout.Width(20));
                    EditorGUILayout.LabelField("Prefab " + (j + 1).ToString(), GUILayout.Width(50));
                    prefabLibrary.prefabCategories[i].prefabs[j] = (GameObject)EditorGUILayout.ObjectField(prefabLibrary.prefabCategories[i].prefabs[j], typeof(GameObject), false);

                                        // Prefab context menu
                    if (Event.current.type == EventType.ContextClick && GUILayoutUtility.GetLastRect().Contains(Event.current.mousePosition))
                    {
                        Event.current.Use();
                        GenericMenu prefabMenu = new GenericMenu();
                        prefabMenu.AddItem(new GUIContent("Add Prefab"), false, () => AddPrefab(i));
                        prefabMenu.AddItem(new GUIContent("Remove Prefab"), false, () => RemovePrefab(i, j));
                        prefabMenu.AddItem(new GUIContent("Duplicate Prefab"), false, () => DuplicatePrefab(i, j));
                        prefabMenu.ShowAsContext();
                    }

                    EditorGUILayout.LabelField("Instances: " + CountPrefabInstances(prefabLibrary.prefabCategories[i].prefabs[j]));

                    Texture2D prefabPreview = AssetPreview.GetAssetPreview(prefabLibrary.prefabCategories[i].prefabs[j]);
                    GUILayout.Box(prefabPreview, GUILayout.Width(50), GUILayout.Height(50));

                    EditorGUILayout.EndHorizontal();
                }
            }
            EditorGUILayout.Space();
        }

        EditorGUILayout.Space();

        // Batch Operations
        if (GUILayout.Button("Delete Selected", GUILayout.Width(120)))
        {
            DeleteSelectedPrefabs();
        }

        EditorGUILayout.EndScrollView();

        // Save changes to the prefab library asset
        if (GUI.changed)
        {
            EditorUtility.SetDirty(prefabLibrary);
            AssetDatabase.SaveAssets();
        }
    }

    // Prefab Usage Statistics
    private int CountPrefabInstances(GameObject prefab)
    {
        int count = 0;
        GameObject[] allObjects = GameObject.FindObjectsOfType<GameObject>();

        foreach (GameObject obj in allObjects)
        {
            if (PrefabUtility.GetCorrespondingObjectFromSource(obj) == prefab)
            {
                count++;
            }
        }

        return count;
    }

    // Batch Operations
    private void DeleteSelectedPrefabs()
    {
        for (int i = 0; i < prefabLibrary.prefabCategories.Count; i++)
        {
            for (int j = prefabLibrary.prefabCategories[i].prefabs.Count - 1; j >= 0; j--)
            {
                if (prefabSelectionStates[i][j])
                {
                    prefabLibrary.prefabCategories[i].prefabs.RemoveAt(j);
                }
            }
        }
    }

    // Contextual Menus
    private void AddPrefab(int categoryIndex)
    {
        prefabLibrary.prefabCategories[categoryIndex].prefabs.Add(null);
    }

    private void RemovePrefab(int categoryIndex, int prefabIndex)
    {
        prefabLibrary.prefabCategories[categoryIndex].prefabs.RemoveAt(prefabIndex);
    }

    private void DuplicatePrefab(int categoryIndex, int prefabIndex)
    {
        prefabLibrary.prefabCategories[categoryIndex].prefabs.Add(prefabLibrary.prefabCategories[categoryIndex].prefabs[prefabIndex]);
    }

    private void AddCategory()
    {
        prefabLibrary.prefabCategories.Add(new PrefabCategory());
    }

    private void RemoveCategory(int categoryIndex)
    {
        prefabLibrary.prefabCategories.RemoveAt(categoryIndex);
    }
}


   
